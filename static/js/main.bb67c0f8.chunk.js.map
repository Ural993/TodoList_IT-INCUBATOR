{"version":3,"sources":["serviceWorker.ts","state/todolistsReducer.ts","state/tasksReducer.ts","state/store.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","v1","rootReducer","combineReducers","todolists","state","action","type","filter","t","id","todolistId","title","map","tasks","taskId","isDone","newState","store","createStore","AddItemForm","React","memo","props","console","log","useState","setTitle","error","setError","addItem","trim","TextField","value","size","helperText","variant","onChange","e","currentTarget","onKeyPress","charCode","label","IconButton","onClick","color","AddCircleOutline","fontSize","EditableSpan","editMode","setEditMode","autoFocus","onBlur","Edit","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","task","ListItem","divider","className","Checkbox","newIsDoneValue","checked","changeTaskStatus","removeTask","Delete","Todolist","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","Typography","align","style","fontWeight","removeTodolist","Button","AppWithRedux","dispatch","useDispatch","useSelector","addTaskAC","removeTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","addTodolist","AddTodolistAC","ChangeTodolistTitleAC","AppBar","position","Toolbar","Menu","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","elevation","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bb67c0f8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {FilterValuesType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    title: string\r\n    id: string\r\n}\r\ntype ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    filter: FilterValuesType\r\n    id: string\r\n}\r\nexport let todolistId1 = v1();\r\nexport let todolistId2 = v1();\r\n\r\nconst initialState:Array<TodolistType>= []\r\ntype ActionType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(t => t.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id: action.todolistId, title: action.title, filter: 'all'}]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(t => (t.id === action.id ? {...t, title: action.title} : t))\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(t => (t.id === action.id ? {...t, filter: action.filter} : t))\r\n        default :\r\n            return state\r\n    }\r\n\r\n}\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const AddTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const ChangeTodolistTitleAC = (title: string, id: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', title: title, id: id}\r\n}\r\nexport const ChangeTodolistFilterAC = (filter: FilterValuesType, id: string): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n","import {FilterValuesType, TasksStateType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType, todolistId1, todolistId2} from \"./todolistsReducer\";\r\n\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n}\r\ntype AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype changeTaskStatusAC = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\ntype changeTaskTitleAC = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\nconst initialState:TasksStateType = {\r\n}\r\ntype ActionType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | changeTaskStatusAC\r\n    | changeTaskTitleAC\r\n    | AddTodolistActionType | RemoveTodolistActionType\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todolistId]]\r\n            }\r\n\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [...state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    isDone: action.isDone\r\n                } : t)]\r\n            }\r\n\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [...state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    title: action.title\r\n                } : t)]\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolistId]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            let newState = {...state}\r\n            delete newState[action.id]\r\n            return newState\r\n        default :\r\n            return state\r\n    }\r\n\r\n}\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', todolistId, taskId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): changeTaskStatusAC => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): changeTaskTitleAC => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolistsReducer\";\r\nimport {tasksReducer} from \"./tasksReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n        todolists: todolistsReducer,\r\n        tasks: tasksReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type StoreType = ReturnType<typeof rootReducer>\r\n\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import IconButton from '@material-ui/core/IconButton';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {AddCircleOutline} from '@material-ui/icons';\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const  AddItemForm = React.memo((props: AddItemFormPropsType) =>{\r\n    console.log('AddItemForm called')\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null){\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField value={title}\r\n                   size={\"small\"}\r\n                   helperText={error}\r\n                   variant='outlined'\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n            //className={error ? \"error\" : \"\"}\r\n                   error={!!error}\r\n                   label='Text'\r\n        />\r\n        <IconButton onClick={addItem} color='primary' size=\"small\">\r\n            <AddCircleOutline fontSize={\"medium\"}/>\r\n        </IconButton>\r\n\r\n        {/* {error && <div className=\"error-message\">{error}</div>} */}\r\n    </div>\r\n})\r\n","import TextField from '@material-ui/core/TextField';\r\nimport React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Edit } from '@material-ui/icons';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) =>{\r\n    console.log('EditableSpan')\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span >{props.value}\r\n            <IconButton onClick={activateEditMode}>\r\n                <Edit fontSize={\"small\"}/>\r\n            </IconButton>\r\n    </span>\r\n})\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    id: string\r\n\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.id)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.id);\r\n    }\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.id);\r\n    }, [props.changeTaskTitle, props.task.id, props.id])\r\n\r\n\r\n    return <ListItem divider={true} key={props.task.id} className={props.task.isDone ? \"is-done\" : \"\"}>\r\n        <Checkbox onChange={onChangeHandler} checked={props.task.isDone}/>\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler} aria-label=\"delete\" size=\"small\">\r\n            <Delete fontSize=\"inherit\"/>\r\n        </IconButton>\r\n    </ListItem>\r\n})","import React, {useCallback} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {Delete} from '@material-ui/icons';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List/List';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Task} from \"./Task\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log('Todolist is called')\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    },[props.changeTodolistTitle, props.id])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id),\r\n        [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id),\r\n        [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id),\r\n        [props.changeFilter, props.id]);\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true);\r\n    }\r\n\r\n    return <div>\r\n        <Typography align={\"center\"} variant={'h6'} style={{fontWeight: 'bold'}}>\r\n            <EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} aria-label=\"delete\" size=\"small\">\r\n                <Delete fontSize=\"inherit\"/>\r\n            </IconButton>\r\n        </Typography>\r\n        <AddItemForm addItem={addTask}/>\r\n        <List>\r\n            {\r\n                tasksForTodolist.map(t =>\r\n                    <Task changeTaskTitle={props.changeTaskTitle} changeTaskStatus={props.changeTaskStatus}\r\n                          id={props.id} removeTask={props.removeTask} task={t} key={t.id}/>\r\n                )\r\n            }\r\n        </List>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? \"contained\" : \"text\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button color='primary' variant={props.filter === 'active' ? \"contained\" : \"text\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button color='secondary' variant={props.filter === 'completed' ? \"contained\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Menu} from '@material-ui/icons';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n    AddTodolistAC,\r\n    ChangeTodolistFilterAC,\r\n    ChangeTodolistTitleAC,\r\n    RemoveTodolistAC,\r\n} from \"./state/todolistsReducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasksReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StoreType} from \"./state/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport function AppWithRedux() {\r\n\r\n    console.log('App is called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const todolists = useSelector<StoreType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<StoreType, TasksStateType>(state => state.tasks)\r\n\r\n    const addTask = useCallback((title: string, todolistId: string)=> {\r\n        let action = addTaskAC(title, todolistId)\r\n        dispatch(action)\r\n    },[])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) =>{\r\n        let action = removeTaskAC(id, todolistId)\r\n        dispatch(action)\r\n    },[])\r\n\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) =>{\r\n        let action = changeTaskStatusAC(id, isDone, todolistId)\r\n        dispatch(action)\r\n    },[])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) =>{\r\n        let action = changeTaskTitleAC(id, newTitle, todolistId)\r\n        dispatch(action)\r\n    },[])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        let action = AddTodolistAC(title)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback((id: string)=> {\r\n        let action = RemoveTodolistAC(id)\r\n        dispatch(action)\r\n    },[])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string)=> {\r\n        let action = ChangeTodolistFilterAC(value, todolistId)\r\n        dispatch(action)\r\n    },[])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string)=> {\r\n        let action = ChangeTodolistTitleAC(title, id)\r\n        dispatch(action)\r\n    },[])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container>\r\n                    <Grid style={{padding: '10px'}}>\r\n                        <AddItemForm addItem={addTodolist}/>\r\n                    </Grid>\r\n                    <Grid container spacing={3}>\r\n\r\n                        {\r\n                            todolists.map(tl => {\r\n                                let tasksForTodolist = tasks[tl.id];\r\n                                return <Grid item key={tl.id}>\r\n                                    <Paper elevation={3} style={{padding: '10px'}}>\r\n                                        <Todolist\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasksForTodolist}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            addTask={addTask}\r\n                                            changeTaskStatus={changeStatus}\r\n                                            filter={tl.filter}\r\n                                            removeTodolist={removeTodolist}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodolistTitle={changeTodolistTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            })\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {AppWithReducers} from './AppWithReducers';\r\nimport {Provider} from \"react-redux\";\r\nimport { store } from './state/store';\r\nimport {AppWithRedux} from \"./AppWithRedux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    < AppWithRedux />\r\n         </Provider>\r\n,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}